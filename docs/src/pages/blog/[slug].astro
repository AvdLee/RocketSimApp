---
import { JSDOM } from "jsdom";
import Base from "@/layouts/Base.astro";
import config from "@/config/config.json";
import { selectOgImage } from "@/lib/utils/selectOgImage";

const { slug } = Astro.params;

export async function getStaticPaths() {
  let data = await fetch("http://localhost:8888/wp-json/wp/v2/posts");
  let posts = (await data.json()) as Array<{ slug: string }>;

  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post: post },
  }));
}

let post;

try {
  // TODO: make url dynamic based on environment
  const res = await fetch(
    `http://localhost:8888/wp-json/wp/v2/posts?slug=${slug}&_embed`,
  );
  [post] = await res.json();
} catch (e) {
  throw e;
}

const title = post.title.rendered;
const articlePublishedTime = post.date;
const articleModifiedTime = post.modified;
const image = post._embedded?.["wp:featuredmedia"]?.[0]
  ? selectOgImage(post._embedded["wp:featuredmedia"][0].media_details.sizes)
  : undefined;
const { description } = post.yoast_head_json;

const {
  site: { base_url },
} = config;

/**
 * Manipulate the post content in any way you want here.
 */
const dom = new JSDOM(post.content.rendered);
const doc = dom.window.document;

const videos = doc.querySelectorAll("video");

videos.forEach((video) => {
  video.setAttribute("autoplay", "true");
  video.setAttribute("playsinline", "true");
  video.setAttribute("muted", "true");
  video.setAttribute("loop", "true");
});

const manipulatedDom = dom.serialize();
---

<Base
  title={title}
  meta_title={`${title} - RocketSim`}
  description={description}
  canonical={`${base_url}/blog/${post.slug}`}
  contentType="article"
  articlePublishedTime={articlePublishedTime}
  articleModifiedTime={articleModifiedTime}
  image={image}
>
  <article>
    <h1 set:html={post.title.rendered} />
    <Fragment set:html={manipulatedDom} />
  </article>
</Base>
